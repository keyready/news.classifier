import pandas as pd
import nltk
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from sklearn.metrics import classification_report, accuracy_score
import string
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split


# Пример данных (тексты и их категории)
data = {
    'text': [
        "Штормовое предупреждение в Москве: сильный дождь и порывистый ветер до 20 м/с.",
        "Циклон, который приближается к побережью, вызвал мощные волны и шторм в Черном море.",
        "На Камчатке извержение вулкана Ключевская сопка, выброс пепла достигает 8 км в высоту.",
        "В Сибири ожидаются экстремально низкие температуры, местами до -40°C, возможны заморозки.",
        "В Токио затоплены улицы из-за сильных ливней, дождь не прекращается уже 12 часов.",
        "В Бразилии ожидается ураган, который может повлиять на прибрежные районы, возможны наводнения.",
        "В Лос-Анджелесе в течение недели будут сильные лесные пожары из-за засушливой погоды и высоких температур.",
        "На юге России ожидаются сильные метели и морозы, закрыты многие дороги.",
        "В Индийском океане возник мощный циклон, который может привести к разрушениям в прибрежных странах.",
        "В Арктике температура достигла рекорда за всю историю наблюдений: -58°C, образуются ледяные бури.",
        "Лионель Месси стал лучшим бомбардиром Чемпионата мира по футболу 2022 года, забив 7 голов.",
        "На Олимпийских играх в Токио Россия завоевала 20 золотых медалей, среди которых 5 в гимнастике.",
        "В чемпионате НХЛ «Вашингтон Кэпиталз» одержал победу в решающем матче, победив «Питтсбург Пингвинз» со счётом 3:2.",
        "Александр Овечкин установил новый рекорд, став первым в истории НХЛ по числу голов в матчах против «Нью-Йорк Рейнджерс».",
        "Сегодня в Мадриде начинается матч Лиги чемпионов, где «Реал» встречается с «Манчестер Сити».",
        "В финале Кубка мира по баскетболу сборная США победила Испанию с разницей в 15 очков.",
        "В Париже прошёл турнир по теннису «Ролан Гаррос», на котором Серена Уильямс одержала победу в одиночном разряде.",
        "Российский боксёр Дмитрий Бивол победил Сауля «Канело» Альвареса в бою за титул чемпиона мира по версии WBA.",
        "В Москве прошёл Кубок мира по шахматам, на котором шахматист Ян Непомнящий одержал уверенную победу.",
        "На Чемпионате Европы по футболу Италия одержала историческую победу над Англией в финале, выиграв со счётом 2:1.",
        "В Сочи завершился международный турнир по фигурному катанию, в котором победу одержала Юлия Липницкая.",
        "На Чемпионате мира по волейболу среди женщин в Японии сборная России выиграла бронзу.",
        "На Мастерс по гольфу в Сент-Луисе победу одержал американец Тайгер Вудс, установив новый рекорд по числу титулов.",
        "Российская теннисистка Арина Соболенко победила на турнире в Австралии, обыграв в финале Эмму Радукану.",
        "В минувшие выходные в Токио прошёл международный турнир по дзюдо, на котором россиянин Артем Барышев занял первое место.",
        "Формула-1: Льюис Хэмилтон выиграл Гран-при Монако, что стало его 98-й победой в карьере.",
        "В Москве состоялся матч Лиги чемпионов, в котором «ЦСКА» выиграл у «Барселоны» с минимальным счётом 1:0.",
        "В Нью-Йорке прошёл международный марафон, на котором победу одержал кенийский бегун Элиуд Кипчоге.",
        "Сборная Франции по хоккею выиграла Чемпионат мира в 2023 году, одержав победу в финале над Канадой.",
        "На чемпионате мира по бадминтону в Дании победу одержала китайская спортсменка Чжан Нань, выигравшая свой третий титул.",
        "Штормовое предупреждение в Калининградской области: ожидаются сильные ветры и дождь.",
        "Вулкан на Камчатке снова активизировался, наблюдаются выбросы пепла на высоту 10 км.",
        "В Сочи ожидаются сильные ливни, возможны оползни в горных районах.",
        "По прогнозам метеорологов, в Якутии ожидается циклон, с возможностью затоплений в низинах.",
        "На территории Краснодарского края объявлено штормовое предупреждение из-за сильных дождей.",
        "В Чили продолжается активность вулкана Ла-Сьерра, жители близлежащих районов эвакуированы.",
        "На севере России ожидается экстремально низкая температура, возможен выход рек из берегов.",
        "В Турции сильные землетрясения вызвали разрушение жилых домов и угрозу оползней.",
        "Циклон, который на прошлой неделе обрушился на Японию, теперь приближается к южному побережью России.",
        "В Индийском океане наблюдается образование мощного тропического шторма, который может вызвать наводнения в прибрежных странах."
    ],
    'category': [
        'погода', 'погода', 'погода', 'погода', 'погода',
        'погода', 'погода', 'погода', 'погода', 'погода',
        'спорт', 'спорт', 'спорт', 'спорт', 'спорт', 
        'спорт', 'спорт', 'спорт', 'спорт', 'спорт', 
        'спорт', 'спорт', 'спорт', 'спорт', 'спорт', 
        'спорт', 'спорт', 'спорт', 'спорт', 'спорт',
        'погода', 'погода', 'погода', 'погода', 'погода',
        'погода', 'погода', 'погода', 'погода', 'погода',
    ]
}

# Создаем DataFrame
df = pd.DataFrame(data)
print(df)

# Загружаем необходимые ресурсы из nltk
nltk.download('stopwords')
nltk.download('wordnet')

# Стоп-слова и лемматизатор
stop_words = set(stopwords.words('russian'))
lemmatizer = WordNetLemmatizer()

# Функция для очистки текста
def preprocess_text(text):
    # Приведение текста в нижний регистр
    text = text.lower()
    
    # Удаление знаков препинания
    text = ''.join([char for char in text if char not in string.punctuation])
    
    # Лемматизация и удаление стоп-слов
    text = ' '.join([lemmatizer.lemmatize(word) for word in text.split() if word not in stop_words])
    
    return text

# Применяем предобработку
df['cleaned_text'] = df['text'].apply(preprocess_text)
print(df[['text', 'cleaned_text']])

# Векторизация текста с использованием TF-IDF
vectorizer = TfidfVectorizer()

# Преобразуем очищенные тексты в матрицу признаков
X = vectorizer.fit_transform(df['cleaned_text'])
print(X.shape)  # Размер матрицы признаков

# //////////////////////////////////
# Категории для классификации
y = df['category']

# Разделение данных на обучающую и тестовую выборки (80% - обучающая, 20% - тестовая)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Создаем модель логистической регрессии
model = LogisticRegression(max_iter=1000)

# Обучаем модель
model.fit(X_train, y_train)

# Прогнозирование на тестовых данных
y_pred = model.predict(X_test)


# Оценка точности модели
print(f"Accuracy: {accuracy_score(y_test, y_pred):.4f}")

# Подробный отчет по меткам
print("\nClassification Report:\n", classification_report(y_test, y_pred))

new_texts = [
    "американский спортсмен выиграл куюбок формулы 1 на соревнованиях, несмотря на плохие погодные условия",
]
new_texts_cleaned = [preprocess_text(text) for text in new_texts]
new_X = vectorizer.transform(new_texts_cleaned)

# Прогнозируем категории для новых текстов
new_predictions = model.predict(new_X)
print("Predictions for new texts:", new_predictions)